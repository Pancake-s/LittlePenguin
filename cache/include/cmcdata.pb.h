// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmcdata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cmcdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cmcdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cmcdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cmcdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cmcdata_2eproto;
class AckInfo;
struct AckInfoDefaultTypeInternal;
extern AckInfoDefaultTypeInternal _AckInfo_default_instance_;
class CMCData;
struct CMCDataDefaultTypeInternal;
extern CMCDataDefaultTypeInternal _CMCData_default_instance_;
class CommandInfo;
struct CommandInfoDefaultTypeInternal;
extern CommandInfoDefaultTypeInternal _CommandInfo_default_instance_;
class HashSlotInfo;
struct HashSlotInfoDefaultTypeInternal;
extern HashSlotInfoDefaultTypeInternal _HashSlotInfo_default_instance_;
class HashSlotInfo_CacheNodeInfo;
struct HashSlotInfo_CacheNodeInfoDefaultTypeInternal;
extern HashSlotInfo_CacheNodeInfoDefaultTypeInternal _HashSlotInfo_CacheNodeInfo_default_instance_;
class HeartInfo;
struct HeartInfoDefaultTypeInternal;
extern HeartInfoDefaultTypeInternal _HeartInfo_default_instance_;
class KvData;
struct KvDataDefaultTypeInternal;
extern KvDataDefaultTypeInternal _KvData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AckInfo* Arena::CreateMaybeMessage<::AckInfo>(Arena*);
template<> ::CMCData* Arena::CreateMaybeMessage<::CMCData>(Arena*);
template<> ::CommandInfo* Arena::CreateMaybeMessage<::CommandInfo>(Arena*);
template<> ::HashSlotInfo* Arena::CreateMaybeMessage<::HashSlotInfo>(Arena*);
template<> ::HashSlotInfo_CacheNodeInfo* Arena::CreateMaybeMessage<::HashSlotInfo_CacheNodeInfo>(Arena*);
template<> ::HeartInfo* Arena::CreateMaybeMessage<::HeartInfo>(Arena*);
template<> ::KvData* Arena::CreateMaybeMessage<::KvData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum HashSlotInfo_HashInfoType : int {
  HashSlotInfo_HashInfoType_NULLHASHINFO = 0,
  HashSlotInfo_HashInfoType_ALLCACHEINFO = 1,
  HashSlotInfo_HashInfoType_ADDCACHE = 2,
  HashSlotInfo_HashInfoType_REMCACHE = 3,
  HashSlotInfo_HashInfoType_HashSlotInfo_HashInfoType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HashSlotInfo_HashInfoType_HashSlotInfo_HashInfoType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HashSlotInfo_HashInfoType_IsValid(int value);
constexpr HashSlotInfo_HashInfoType HashSlotInfo_HashInfoType_HashInfoType_MIN = HashSlotInfo_HashInfoType_NULLHASHINFO;
constexpr HashSlotInfo_HashInfoType HashSlotInfo_HashInfoType_HashInfoType_MAX = HashSlotInfo_HashInfoType_REMCACHE;
constexpr int HashSlotInfo_HashInfoType_HashInfoType_ARRAYSIZE = HashSlotInfo_HashInfoType_HashInfoType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HashSlotInfo_HashInfoType_descriptor();
template<typename T>
inline const std::string& HashSlotInfo_HashInfoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HashSlotInfo_HashInfoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HashSlotInfo_HashInfoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HashSlotInfo_HashInfoType_descriptor(), enum_t_value);
}
inline bool HashSlotInfo_HashInfoType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HashSlotInfo_HashInfoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HashSlotInfo_HashInfoType>(
    HashSlotInfo_HashInfoType_descriptor(), name, value);
}
enum CommandInfo_CmdType : int {
  CommandInfo_CmdType_NULLCMD = 0,
  CommandInfo_CmdType_GET = 1,
  CommandInfo_CmdType_SET = 2,
  CommandInfo_CmdType_DEL = 3,
  CommandInfo_CmdType_GETSLOT = 4,
  CommandInfo_CmdType_OFFLINE = 5,
  CommandInfo_CmdType_CommandInfo_CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CommandInfo_CmdType_CommandInfo_CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CommandInfo_CmdType_IsValid(int value);
constexpr CommandInfo_CmdType CommandInfo_CmdType_CmdType_MIN = CommandInfo_CmdType_NULLCMD;
constexpr CommandInfo_CmdType CommandInfo_CmdType_CmdType_MAX = CommandInfo_CmdType_OFFLINE;
constexpr int CommandInfo_CmdType_CmdType_ARRAYSIZE = CommandInfo_CmdType_CmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandInfo_CmdType_descriptor();
template<typename T>
inline const std::string& CommandInfo_CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandInfo_CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandInfo_CmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandInfo_CmdType_descriptor(), enum_t_value);
}
inline bool CommandInfo_CmdType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandInfo_CmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandInfo_CmdType>(
    CommandInfo_CmdType_descriptor(), name, value);
}
enum HeartInfo_CacheStatus : int {
  HeartInfo_CacheStatus_NULLSTATUS = 0,
  HeartInfo_CacheStatus_OK = 1,
  HeartInfo_CacheStatus_FAIL = 2,
  HeartInfo_CacheStatus_HeartInfo_CacheStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HeartInfo_CacheStatus_HeartInfo_CacheStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HeartInfo_CacheStatus_IsValid(int value);
constexpr HeartInfo_CacheStatus HeartInfo_CacheStatus_CacheStatus_MIN = HeartInfo_CacheStatus_NULLSTATUS;
constexpr HeartInfo_CacheStatus HeartInfo_CacheStatus_CacheStatus_MAX = HeartInfo_CacheStatus_FAIL;
constexpr int HeartInfo_CacheStatus_CacheStatus_ARRAYSIZE = HeartInfo_CacheStatus_CacheStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HeartInfo_CacheStatus_descriptor();
template<typename T>
inline const std::string& HeartInfo_CacheStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HeartInfo_CacheStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HeartInfo_CacheStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HeartInfo_CacheStatus_descriptor(), enum_t_value);
}
inline bool HeartInfo_CacheStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HeartInfo_CacheStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HeartInfo_CacheStatus>(
    HeartInfo_CacheStatus_descriptor(), name, value);
}
enum AckInfo_AckType : int {
  AckInfo_AckType_NULLACK = 0,
  AckInfo_AckType_SETACK = 1,
  AckInfo_AckType_DELACK = 2,
  AckInfo_AckType_CACHEUPDATEACK = 3,
  AckInfo_AckType_AckInfo_AckType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AckInfo_AckType_AckInfo_AckType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AckInfo_AckType_IsValid(int value);
constexpr AckInfo_AckType AckInfo_AckType_AckType_MIN = AckInfo_AckType_NULLACK;
constexpr AckInfo_AckType AckInfo_AckType_AckType_MAX = AckInfo_AckType_CACHEUPDATEACK;
constexpr int AckInfo_AckType_AckType_ARRAYSIZE = AckInfo_AckType_AckType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AckInfo_AckType_descriptor();
template<typename T>
inline const std::string& AckInfo_AckType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AckInfo_AckType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AckInfo_AckType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AckInfo_AckType_descriptor(), enum_t_value);
}
inline bool AckInfo_AckType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AckInfo_AckType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AckInfo_AckType>(
    AckInfo_AckType_descriptor(), name, value);
}
enum AckInfo_AckStatus : int {
  AckInfo_AckStatus_NULLSTATUS = 0,
  AckInfo_AckStatus_OK = 1,
  AckInfo_AckStatus_FAIL = 2,
  AckInfo_AckStatus_AckInfo_AckStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AckInfo_AckStatus_AckInfo_AckStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AckInfo_AckStatus_IsValid(int value);
constexpr AckInfo_AckStatus AckInfo_AckStatus_AckStatus_MIN = AckInfo_AckStatus_NULLSTATUS;
constexpr AckInfo_AckStatus AckInfo_AckStatus_AckStatus_MAX = AckInfo_AckStatus_FAIL;
constexpr int AckInfo_AckStatus_AckStatus_ARRAYSIZE = AckInfo_AckStatus_AckStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AckInfo_AckStatus_descriptor();
template<typename T>
inline const std::string& AckInfo_AckStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AckInfo_AckStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AckInfo_AckStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AckInfo_AckStatus_descriptor(), enum_t_value);
}
inline bool AckInfo_AckStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AckInfo_AckStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AckInfo_AckStatus>(
    AckInfo_AckStatus_descriptor(), name, value);
}
enum CMCData_DataType : int {
  CMCData_DataType_NULLTYPE = 0,
  CMCData_DataType_COMMANDINFO = 1,
  CMCData_DataType_KVDATA = 2,
  CMCData_DataType_HASHSLOTINFO = 3,
  CMCData_DataType_HEARTINFO = 4,
  CMCData_DataType_ACKINFO = 5,
  CMCData_DataType_CMCData_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CMCData_DataType_CMCData_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CMCData_DataType_IsValid(int value);
constexpr CMCData_DataType CMCData_DataType_DataType_MIN = CMCData_DataType_NULLTYPE;
constexpr CMCData_DataType CMCData_DataType_DataType_MAX = CMCData_DataType_ACKINFO;
constexpr int CMCData_DataType_DataType_ARRAYSIZE = CMCData_DataType_DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMCData_DataType_descriptor();
template<typename T>
inline const std::string& CMCData_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMCData_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMCData_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMCData_DataType_descriptor(), enum_t_value);
}
inline bool CMCData_DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMCData_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMCData_DataType>(
    CMCData_DataType_descriptor(), name, value);
}
// ===================================================================

class HashSlotInfo_CacheNodeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HashSlotInfo.CacheNodeInfo) */ {
 public:
  inline HashSlotInfo_CacheNodeInfo() : HashSlotInfo_CacheNodeInfo(nullptr) {}
  ~HashSlotInfo_CacheNodeInfo() override;
  explicit constexpr HashSlotInfo_CacheNodeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HashSlotInfo_CacheNodeInfo(const HashSlotInfo_CacheNodeInfo& from);
  HashSlotInfo_CacheNodeInfo(HashSlotInfo_CacheNodeInfo&& from) noexcept
    : HashSlotInfo_CacheNodeInfo() {
    *this = ::std::move(from);
  }

  inline HashSlotInfo_CacheNodeInfo& operator=(const HashSlotInfo_CacheNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashSlotInfo_CacheNodeInfo& operator=(HashSlotInfo_CacheNodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HashSlotInfo_CacheNodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashSlotInfo_CacheNodeInfo* internal_default_instance() {
    return reinterpret_cast<const HashSlotInfo_CacheNodeInfo*>(
               &_HashSlotInfo_CacheNodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HashSlotInfo_CacheNodeInfo& a, HashSlotInfo_CacheNodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HashSlotInfo_CacheNodeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashSlotInfo_CacheNodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HashSlotInfo_CacheNodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HashSlotInfo_CacheNodeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HashSlotInfo_CacheNodeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HashSlotInfo_CacheNodeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashSlotInfo_CacheNodeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HashSlotInfo.CacheNodeInfo";
  }
  protected:
  explicit HashSlotInfo_CacheNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIpFieldNumber = 2,
    kSlotsFieldNumber = 4,
    kPortFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // bytes slots = 4;
  void clear_slots();
  const std::string& slots() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slots(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slots();
  PROTOBUF_NODISCARD std::string* release_slots();
  void set_allocated_slots(std::string* slots);
  private:
  const std::string& _internal_slots() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slots(const std::string& value);
  std::string* _internal_mutable_slots();
  public:

  // int32 port = 3;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HashSlotInfo.CacheNodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slots_;
  int32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmcdata_2eproto;
};
// -------------------------------------------------------------------

class HashSlotInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HashSlotInfo) */ {
 public:
  inline HashSlotInfo() : HashSlotInfo(nullptr) {}
  ~HashSlotInfo() override;
  explicit constexpr HashSlotInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HashSlotInfo(const HashSlotInfo& from);
  HashSlotInfo(HashSlotInfo&& from) noexcept
    : HashSlotInfo() {
    *this = ::std::move(from);
  }

  inline HashSlotInfo& operator=(const HashSlotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashSlotInfo& operator=(HashSlotInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HashSlotInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashSlotInfo* internal_default_instance() {
    return reinterpret_cast<const HashSlotInfo*>(
               &_HashSlotInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HashSlotInfo& a, HashSlotInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HashSlotInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashSlotInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HashSlotInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HashSlotInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HashSlotInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HashSlotInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashSlotInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HashSlotInfo";
  }
  protected:
  explicit HashSlotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HashSlotInfo_CacheNodeInfo CacheNodeInfo;

  typedef HashSlotInfo_HashInfoType HashInfoType;
  static constexpr HashInfoType NULLHASHINFO =
    HashSlotInfo_HashInfoType_NULLHASHINFO;
  static constexpr HashInfoType ALLCACHEINFO =
    HashSlotInfo_HashInfoType_ALLCACHEINFO;
  static constexpr HashInfoType ADDCACHE =
    HashSlotInfo_HashInfoType_ADDCACHE;
  static constexpr HashInfoType REMCACHE =
    HashSlotInfo_HashInfoType_REMCACHE;
  static inline bool HashInfoType_IsValid(int value) {
    return HashSlotInfo_HashInfoType_IsValid(value);
  }
  static constexpr HashInfoType HashInfoType_MIN =
    HashSlotInfo_HashInfoType_HashInfoType_MIN;
  static constexpr HashInfoType HashInfoType_MAX =
    HashSlotInfo_HashInfoType_HashInfoType_MAX;
  static constexpr int HashInfoType_ARRAYSIZE =
    HashSlotInfo_HashInfoType_HashInfoType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HashInfoType_descriptor() {
    return HashSlotInfo_HashInfoType_descriptor();
  }
  template<typename T>
  static inline const std::string& HashInfoType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HashInfoType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HashInfoType_Name.");
    return HashSlotInfo_HashInfoType_Name(enum_t_value);
  }
  static inline bool HashInfoType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HashInfoType* value) {
    return HashSlotInfo_HashInfoType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCacheNodesFieldNumber = 2,
    kCacheNodeFieldNumber = 3,
    kHashinfoTypeFieldNumber = 1,
  };
  // repeated .HashSlotInfo.CacheNodeInfo cache_nodes = 2;
  int cache_nodes_size() const;
  private:
  int _internal_cache_nodes_size() const;
  public:
  void clear_cache_nodes();
  ::HashSlotInfo_CacheNodeInfo* mutable_cache_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HashSlotInfo_CacheNodeInfo >*
      mutable_cache_nodes();
  private:
  const ::HashSlotInfo_CacheNodeInfo& _internal_cache_nodes(int index) const;
  ::HashSlotInfo_CacheNodeInfo* _internal_add_cache_nodes();
  public:
  const ::HashSlotInfo_CacheNodeInfo& cache_nodes(int index) const;
  ::HashSlotInfo_CacheNodeInfo* add_cache_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HashSlotInfo_CacheNodeInfo >&
      cache_nodes() const;

  // .HashSlotInfo.CacheNodeInfo cache_node = 3;
  bool has_cache_node() const;
  private:
  bool _internal_has_cache_node() const;
  public:
  void clear_cache_node();
  const ::HashSlotInfo_CacheNodeInfo& cache_node() const;
  PROTOBUF_NODISCARD ::HashSlotInfo_CacheNodeInfo* release_cache_node();
  ::HashSlotInfo_CacheNodeInfo* mutable_cache_node();
  void set_allocated_cache_node(::HashSlotInfo_CacheNodeInfo* cache_node);
  private:
  const ::HashSlotInfo_CacheNodeInfo& _internal_cache_node() const;
  ::HashSlotInfo_CacheNodeInfo* _internal_mutable_cache_node();
  public:
  void unsafe_arena_set_allocated_cache_node(
      ::HashSlotInfo_CacheNodeInfo* cache_node);
  ::HashSlotInfo_CacheNodeInfo* unsafe_arena_release_cache_node();

  // .HashSlotInfo.HashInfoType hashinfo_type = 1;
  void clear_hashinfo_type();
  ::HashSlotInfo_HashInfoType hashinfo_type() const;
  void set_hashinfo_type(::HashSlotInfo_HashInfoType value);
  private:
  ::HashSlotInfo_HashInfoType _internal_hashinfo_type() const;
  void _internal_set_hashinfo_type(::HashSlotInfo_HashInfoType value);
  public:

  // @@protoc_insertion_point(class_scope:HashSlotInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HashSlotInfo_CacheNodeInfo > cache_nodes_;
  ::HashSlotInfo_CacheNodeInfo* cache_node_;
  int hashinfo_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmcdata_2eproto;
};
// -------------------------------------------------------------------

class CommandInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CommandInfo) */ {
 public:
  inline CommandInfo() : CommandInfo(nullptr) {}
  ~CommandInfo() override;
  explicit constexpr CommandInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandInfo(const CommandInfo& from);
  CommandInfo(CommandInfo&& from) noexcept
    : CommandInfo() {
    *this = ::std::move(from);
  }

  inline CommandInfo& operator=(const CommandInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandInfo& operator=(CommandInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandInfo* internal_default_instance() {
    return reinterpret_cast<const CommandInfo*>(
               &_CommandInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommandInfo& a, CommandInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommandInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CommandInfo";
  }
  protected:
  explicit CommandInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommandInfo_CmdType CmdType;
  static constexpr CmdType NULLCMD =
    CommandInfo_CmdType_NULLCMD;
  static constexpr CmdType GET =
    CommandInfo_CmdType_GET;
  static constexpr CmdType SET =
    CommandInfo_CmdType_SET;
  static constexpr CmdType DEL =
    CommandInfo_CmdType_DEL;
  static constexpr CmdType GETSLOT =
    CommandInfo_CmdType_GETSLOT;
  static constexpr CmdType OFFLINE =
    CommandInfo_CmdType_OFFLINE;
  static inline bool CmdType_IsValid(int value) {
    return CommandInfo_CmdType_IsValid(value);
  }
  static constexpr CmdType CmdType_MIN =
    CommandInfo_CmdType_CmdType_MIN;
  static constexpr CmdType CmdType_MAX =
    CommandInfo_CmdType_CmdType_MAX;
  static constexpr int CmdType_ARRAYSIZE =
    CommandInfo_CmdType_CmdType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CmdType_descriptor() {
    return CommandInfo_CmdType_descriptor();
  }
  template<typename T>
  static inline const std::string& CmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CmdType_Name.");
    return CommandInfo_CmdType_Name(enum_t_value);
  }
  static inline bool CmdType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CmdType* value) {
    return CommandInfo_CmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParam1FieldNumber = 2,
    kParam2FieldNumber = 3,
    kCmdTypeFieldNumber = 1,
  };
  // string param1 = 2;
  void clear_param1();
  const std::string& param1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param1();
  PROTOBUF_NODISCARD std::string* release_param1();
  void set_allocated_param1(std::string* param1);
  private:
  const std::string& _internal_param1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param1(const std::string& value);
  std::string* _internal_mutable_param1();
  public:

  // string param2 = 3;
  void clear_param2();
  const std::string& param2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param2();
  PROTOBUF_NODISCARD std::string* release_param2();
  void set_allocated_param2(std::string* param2);
  private:
  const std::string& _internal_param2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param2(const std::string& value);
  std::string* _internal_mutable_param2();
  public:

  // .CommandInfo.CmdType cmd_type = 1;
  void clear_cmd_type();
  ::CommandInfo_CmdType cmd_type() const;
  void set_cmd_type(::CommandInfo_CmdType value);
  private:
  ::CommandInfo_CmdType _internal_cmd_type() const;
  void _internal_set_cmd_type(::CommandInfo_CmdType value);
  public:

  // @@protoc_insertion_point(class_scope:CommandInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param2_;
  int cmd_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmcdata_2eproto;
};
// -------------------------------------------------------------------

class KvData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KvData) */ {
 public:
  inline KvData() : KvData(nullptr) {}
  ~KvData() override;
  explicit constexpr KvData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvData(const KvData& from);
  KvData(KvData&& from) noexcept
    : KvData() {
    *this = ::std::move(from);
  }

  inline KvData& operator=(const KvData& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvData& operator=(KvData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvData& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvData* internal_default_instance() {
    return reinterpret_cast<const KvData*>(
               &_KvData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KvData& a, KvData& b) {
    a.Swap(&b);
  }
  inline void Swap(KvData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KvData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KvData";
  }
  protected:
  explicit KvData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:KvData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmcdata_2eproto;
};
// -------------------------------------------------------------------

class HeartInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HeartInfo) */ {
 public:
  inline HeartInfo() : HeartInfo(nullptr) {}
  ~HeartInfo() override;
  explicit constexpr HeartInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartInfo(const HeartInfo& from);
  HeartInfo(HeartInfo&& from) noexcept
    : HeartInfo() {
    *this = ::std::move(from);
  }

  inline HeartInfo& operator=(const HeartInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartInfo& operator=(HeartInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartInfo* internal_default_instance() {
    return reinterpret_cast<const HeartInfo*>(
               &_HeartInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HeartInfo& a, HeartInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HeartInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HeartInfo";
  }
  protected:
  explicit HeartInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HeartInfo_CacheStatus CacheStatus;
  static constexpr CacheStatus NULLSTATUS =
    HeartInfo_CacheStatus_NULLSTATUS;
  static constexpr CacheStatus OK =
    HeartInfo_CacheStatus_OK;
  static constexpr CacheStatus FAIL =
    HeartInfo_CacheStatus_FAIL;
  static inline bool CacheStatus_IsValid(int value) {
    return HeartInfo_CacheStatus_IsValid(value);
  }
  static constexpr CacheStatus CacheStatus_MIN =
    HeartInfo_CacheStatus_CacheStatus_MIN;
  static constexpr CacheStatus CacheStatus_MAX =
    HeartInfo_CacheStatus_CacheStatus_MAX;
  static constexpr int CacheStatus_ARRAYSIZE =
    HeartInfo_CacheStatus_CacheStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CacheStatus_descriptor() {
    return HeartInfo_CacheStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& CacheStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CacheStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CacheStatus_Name.");
    return HeartInfo_CacheStatus_Name(enum_t_value);
  }
  static inline bool CacheStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CacheStatus* value) {
    return HeartInfo_CacheStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCurTimeFieldNumber = 1,
    kCacheStatusFieldNumber = 2,
  };
  // int32 cur_time = 1;
  void clear_cur_time();
  int32_t cur_time() const;
  void set_cur_time(int32_t value);
  private:
  int32_t _internal_cur_time() const;
  void _internal_set_cur_time(int32_t value);
  public:

  // .HeartInfo.CacheStatus cache_status = 2;
  void clear_cache_status();
  ::HeartInfo_CacheStatus cache_status() const;
  void set_cache_status(::HeartInfo_CacheStatus value);
  private:
  ::HeartInfo_CacheStatus _internal_cache_status() const;
  void _internal_set_cache_status(::HeartInfo_CacheStatus value);
  public:

  // @@protoc_insertion_point(class_scope:HeartInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t cur_time_;
  int cache_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmcdata_2eproto;
};
// -------------------------------------------------------------------

class AckInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AckInfo) */ {
 public:
  inline AckInfo() : AckInfo(nullptr) {}
  ~AckInfo() override;
  explicit constexpr AckInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckInfo(const AckInfo& from);
  AckInfo(AckInfo&& from) noexcept
    : AckInfo() {
    *this = ::std::move(from);
  }

  inline AckInfo& operator=(const AckInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckInfo& operator=(AckInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckInfo* internal_default_instance() {
    return reinterpret_cast<const AckInfo*>(
               &_AckInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AckInfo& a, AckInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AckInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AckInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AckInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AckInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AckInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AckInfo";
  }
  protected:
  explicit AckInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AckInfo_AckType AckType;
  static constexpr AckType NULLACK =
    AckInfo_AckType_NULLACK;
  static constexpr AckType SETACK =
    AckInfo_AckType_SETACK;
  static constexpr AckType DELACK =
    AckInfo_AckType_DELACK;
  static constexpr AckType CACHEUPDATEACK =
    AckInfo_AckType_CACHEUPDATEACK;
  static inline bool AckType_IsValid(int value) {
    return AckInfo_AckType_IsValid(value);
  }
  static constexpr AckType AckType_MIN =
    AckInfo_AckType_AckType_MIN;
  static constexpr AckType AckType_MAX =
    AckInfo_AckType_AckType_MAX;
  static constexpr int AckType_ARRAYSIZE =
    AckInfo_AckType_AckType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AckType_descriptor() {
    return AckInfo_AckType_descriptor();
  }
  template<typename T>
  static inline const std::string& AckType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AckType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AckType_Name.");
    return AckInfo_AckType_Name(enum_t_value);
  }
  static inline bool AckType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AckType* value) {
    return AckInfo_AckType_Parse(name, value);
  }

  typedef AckInfo_AckStatus AckStatus;
  static constexpr AckStatus NULLSTATUS =
    AckInfo_AckStatus_NULLSTATUS;
  static constexpr AckStatus OK =
    AckInfo_AckStatus_OK;
  static constexpr AckStatus FAIL =
    AckInfo_AckStatus_FAIL;
  static inline bool AckStatus_IsValid(int value) {
    return AckInfo_AckStatus_IsValid(value);
  }
  static constexpr AckStatus AckStatus_MIN =
    AckInfo_AckStatus_AckStatus_MIN;
  static constexpr AckStatus AckStatus_MAX =
    AckInfo_AckStatus_AckStatus_MAX;
  static constexpr int AckStatus_ARRAYSIZE =
    AckInfo_AckStatus_AckStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AckStatus_descriptor() {
    return AckInfo_AckStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& AckStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AckStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AckStatus_Name.");
    return AckInfo_AckStatus_Name(enum_t_value);
  }
  static inline bool AckStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AckStatus* value) {
    return AckInfo_AckStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAckTypeFieldNumber = 1,
    kAckStatusFieldNumber = 2,
  };
  // .AckInfo.AckType ack_type = 1;
  void clear_ack_type();
  ::AckInfo_AckType ack_type() const;
  void set_ack_type(::AckInfo_AckType value);
  private:
  ::AckInfo_AckType _internal_ack_type() const;
  void _internal_set_ack_type(::AckInfo_AckType value);
  public:

  // .AckInfo.AckStatus ack_status = 2;
  void clear_ack_status();
  ::AckInfo_AckStatus ack_status() const;
  void set_ack_status(::AckInfo_AckStatus value);
  private:
  ::AckInfo_AckStatus _internal_ack_status() const;
  void _internal_set_ack_status(::AckInfo_AckStatus value);
  public:

  // @@protoc_insertion_point(class_scope:AckInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int ack_type_;
  int ack_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmcdata_2eproto;
};
// -------------------------------------------------------------------

class CMCData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMCData) */ {
 public:
  inline CMCData() : CMCData(nullptr) {}
  ~CMCData() override;
  explicit constexpr CMCData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMCData(const CMCData& from);
  CMCData(CMCData&& from) noexcept
    : CMCData() {
    *this = ::std::move(from);
  }

  inline CMCData& operator=(const CMCData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMCData& operator=(CMCData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMCData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMCData* internal_default_instance() {
    return reinterpret_cast<const CMCData*>(
               &_CMCData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMCData& a, CMCData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMCData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMCData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMCData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMCData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMCData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CMCData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMCData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMCData";
  }
  protected:
  explicit CMCData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMCData_DataType DataType;
  static constexpr DataType NULLTYPE =
    CMCData_DataType_NULLTYPE;
  static constexpr DataType COMMANDINFO =
    CMCData_DataType_COMMANDINFO;
  static constexpr DataType KVDATA =
    CMCData_DataType_KVDATA;
  static constexpr DataType HASHSLOTINFO =
    CMCData_DataType_HASHSLOTINFO;
  static constexpr DataType HEARTINFO =
    CMCData_DataType_HEARTINFO;
  static constexpr DataType ACKINFO =
    CMCData_DataType_ACKINFO;
  static inline bool DataType_IsValid(int value) {
    return CMCData_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    CMCData_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    CMCData_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    CMCData_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return CMCData_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return CMCData_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataType* value) {
    return CMCData_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHsInfoFieldNumber = 2,
    kCmdInfoFieldNumber = 3,
    kKvDataFieldNumber = 4,
    kHtInfoFieldNumber = 5,
    kAckInfoFieldNumber = 6,
    kDataTypeFieldNumber = 1,
  };
  // .HashSlotInfo hs_info = 2;
  bool has_hs_info() const;
  private:
  bool _internal_has_hs_info() const;
  public:
  void clear_hs_info();
  const ::HashSlotInfo& hs_info() const;
  PROTOBUF_NODISCARD ::HashSlotInfo* release_hs_info();
  ::HashSlotInfo* mutable_hs_info();
  void set_allocated_hs_info(::HashSlotInfo* hs_info);
  private:
  const ::HashSlotInfo& _internal_hs_info() const;
  ::HashSlotInfo* _internal_mutable_hs_info();
  public:
  void unsafe_arena_set_allocated_hs_info(
      ::HashSlotInfo* hs_info);
  ::HashSlotInfo* unsafe_arena_release_hs_info();

  // .CommandInfo cmd_info = 3;
  bool has_cmd_info() const;
  private:
  bool _internal_has_cmd_info() const;
  public:
  void clear_cmd_info();
  const ::CommandInfo& cmd_info() const;
  PROTOBUF_NODISCARD ::CommandInfo* release_cmd_info();
  ::CommandInfo* mutable_cmd_info();
  void set_allocated_cmd_info(::CommandInfo* cmd_info);
  private:
  const ::CommandInfo& _internal_cmd_info() const;
  ::CommandInfo* _internal_mutable_cmd_info();
  public:
  void unsafe_arena_set_allocated_cmd_info(
      ::CommandInfo* cmd_info);
  ::CommandInfo* unsafe_arena_release_cmd_info();

  // .KvData kv_data = 4;
  bool has_kv_data() const;
  private:
  bool _internal_has_kv_data() const;
  public:
  void clear_kv_data();
  const ::KvData& kv_data() const;
  PROTOBUF_NODISCARD ::KvData* release_kv_data();
  ::KvData* mutable_kv_data();
  void set_allocated_kv_data(::KvData* kv_data);
  private:
  const ::KvData& _internal_kv_data() const;
  ::KvData* _internal_mutable_kv_data();
  public:
  void unsafe_arena_set_allocated_kv_data(
      ::KvData* kv_data);
  ::KvData* unsafe_arena_release_kv_data();

  // .HeartInfo ht_info = 5;
  bool has_ht_info() const;
  private:
  bool _internal_has_ht_info() const;
  public:
  void clear_ht_info();
  const ::HeartInfo& ht_info() const;
  PROTOBUF_NODISCARD ::HeartInfo* release_ht_info();
  ::HeartInfo* mutable_ht_info();
  void set_allocated_ht_info(::HeartInfo* ht_info);
  private:
  const ::HeartInfo& _internal_ht_info() const;
  ::HeartInfo* _internal_mutable_ht_info();
  public:
  void unsafe_arena_set_allocated_ht_info(
      ::HeartInfo* ht_info);
  ::HeartInfo* unsafe_arena_release_ht_info();

  // .AckInfo ack_info = 6;
  bool has_ack_info() const;
  private:
  bool _internal_has_ack_info() const;
  public:
  void clear_ack_info();
  const ::AckInfo& ack_info() const;
  PROTOBUF_NODISCARD ::AckInfo* release_ack_info();
  ::AckInfo* mutable_ack_info();
  void set_allocated_ack_info(::AckInfo* ack_info);
  private:
  const ::AckInfo& _internal_ack_info() const;
  ::AckInfo* _internal_mutable_ack_info();
  public:
  void unsafe_arena_set_allocated_ack_info(
      ::AckInfo* ack_info);
  ::AckInfo* unsafe_arena_release_ack_info();

  // .CMCData.DataType data_type = 1;
  void clear_data_type();
  ::CMCData_DataType data_type() const;
  void set_data_type(::CMCData_DataType value);
  private:
  ::CMCData_DataType _internal_data_type() const;
  void _internal_set_data_type(::CMCData_DataType value);
  public:

  // @@protoc_insertion_point(class_scope:CMCData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::HashSlotInfo* hs_info_;
  ::CommandInfo* cmd_info_;
  ::KvData* kv_data_;
  ::HeartInfo* ht_info_;
  ::AckInfo* ack_info_;
  int data_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cmcdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HashSlotInfo_CacheNodeInfo

// string name = 1;
inline void HashSlotInfo_CacheNodeInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& HashSlotInfo_CacheNodeInfo::name() const {
  // @@protoc_insertion_point(field_get:HashSlotInfo.CacheNodeInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HashSlotInfo_CacheNodeInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HashSlotInfo.CacheNodeInfo.name)
}
inline std::string* HashSlotInfo_CacheNodeInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:HashSlotInfo.CacheNodeInfo.name)
  return _s;
}
inline const std::string& HashSlotInfo_CacheNodeInfo::_internal_name() const {
  return name_.Get();
}
inline void HashSlotInfo_CacheNodeInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HashSlotInfo_CacheNodeInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HashSlotInfo_CacheNodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:HashSlotInfo.CacheNodeInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HashSlotInfo_CacheNodeInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HashSlotInfo.CacheNodeInfo.name)
}

// string ip = 2;
inline void HashSlotInfo_CacheNodeInfo::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& HashSlotInfo_CacheNodeInfo::ip() const {
  // @@protoc_insertion_point(field_get:HashSlotInfo.CacheNodeInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HashSlotInfo_CacheNodeInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HashSlotInfo.CacheNodeInfo.ip)
}
inline std::string* HashSlotInfo_CacheNodeInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:HashSlotInfo.CacheNodeInfo.ip)
  return _s;
}
inline const std::string& HashSlotInfo_CacheNodeInfo::_internal_ip() const {
  return ip_.Get();
}
inline void HashSlotInfo_CacheNodeInfo::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HashSlotInfo_CacheNodeInfo::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HashSlotInfo_CacheNodeInfo::release_ip() {
  // @@protoc_insertion_point(field_release:HashSlotInfo.CacheNodeInfo.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HashSlotInfo_CacheNodeInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HashSlotInfo.CacheNodeInfo.ip)
}

// int32 port = 3;
inline void HashSlotInfo_CacheNodeInfo::clear_port() {
  port_ = 0;
}
inline int32_t HashSlotInfo_CacheNodeInfo::_internal_port() const {
  return port_;
}
inline int32_t HashSlotInfo_CacheNodeInfo::port() const {
  // @@protoc_insertion_point(field_get:HashSlotInfo.CacheNodeInfo.port)
  return _internal_port();
}
inline void HashSlotInfo_CacheNodeInfo::_internal_set_port(int32_t value) {
  
  port_ = value;
}
inline void HashSlotInfo_CacheNodeInfo::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:HashSlotInfo.CacheNodeInfo.port)
}

// bytes slots = 4;
inline void HashSlotInfo_CacheNodeInfo::clear_slots() {
  slots_.ClearToEmpty();
}
inline const std::string& HashSlotInfo_CacheNodeInfo::slots() const {
  // @@protoc_insertion_point(field_get:HashSlotInfo.CacheNodeInfo.slots)
  return _internal_slots();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HashSlotInfo_CacheNodeInfo::set_slots(ArgT0&& arg0, ArgT... args) {
 
 slots_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HashSlotInfo.CacheNodeInfo.slots)
}
inline std::string* HashSlotInfo_CacheNodeInfo::mutable_slots() {
  std::string* _s = _internal_mutable_slots();
  // @@protoc_insertion_point(field_mutable:HashSlotInfo.CacheNodeInfo.slots)
  return _s;
}
inline const std::string& HashSlotInfo_CacheNodeInfo::_internal_slots() const {
  return slots_.Get();
}
inline void HashSlotInfo_CacheNodeInfo::_internal_set_slots(const std::string& value) {
  
  slots_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HashSlotInfo_CacheNodeInfo::_internal_mutable_slots() {
  
  return slots_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HashSlotInfo_CacheNodeInfo::release_slots() {
  // @@protoc_insertion_point(field_release:HashSlotInfo.CacheNodeInfo.slots)
  return slots_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HashSlotInfo_CacheNodeInfo::set_allocated_slots(std::string* slots) {
  if (slots != nullptr) {
    
  } else {
    
  }
  slots_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slots,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (slots_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    slots_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HashSlotInfo.CacheNodeInfo.slots)
}

// -------------------------------------------------------------------

// HashSlotInfo

// .HashSlotInfo.HashInfoType hashinfo_type = 1;
inline void HashSlotInfo::clear_hashinfo_type() {
  hashinfo_type_ = 0;
}
inline ::HashSlotInfo_HashInfoType HashSlotInfo::_internal_hashinfo_type() const {
  return static_cast< ::HashSlotInfo_HashInfoType >(hashinfo_type_);
}
inline ::HashSlotInfo_HashInfoType HashSlotInfo::hashinfo_type() const {
  // @@protoc_insertion_point(field_get:HashSlotInfo.hashinfo_type)
  return _internal_hashinfo_type();
}
inline void HashSlotInfo::_internal_set_hashinfo_type(::HashSlotInfo_HashInfoType value) {
  
  hashinfo_type_ = value;
}
inline void HashSlotInfo::set_hashinfo_type(::HashSlotInfo_HashInfoType value) {
  _internal_set_hashinfo_type(value);
  // @@protoc_insertion_point(field_set:HashSlotInfo.hashinfo_type)
}

// repeated .HashSlotInfo.CacheNodeInfo cache_nodes = 2;
inline int HashSlotInfo::_internal_cache_nodes_size() const {
  return cache_nodes_.size();
}
inline int HashSlotInfo::cache_nodes_size() const {
  return _internal_cache_nodes_size();
}
inline void HashSlotInfo::clear_cache_nodes() {
  cache_nodes_.Clear();
}
inline ::HashSlotInfo_CacheNodeInfo* HashSlotInfo::mutable_cache_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:HashSlotInfo.cache_nodes)
  return cache_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HashSlotInfo_CacheNodeInfo >*
HashSlotInfo::mutable_cache_nodes() {
  // @@protoc_insertion_point(field_mutable_list:HashSlotInfo.cache_nodes)
  return &cache_nodes_;
}
inline const ::HashSlotInfo_CacheNodeInfo& HashSlotInfo::_internal_cache_nodes(int index) const {
  return cache_nodes_.Get(index);
}
inline const ::HashSlotInfo_CacheNodeInfo& HashSlotInfo::cache_nodes(int index) const {
  // @@protoc_insertion_point(field_get:HashSlotInfo.cache_nodes)
  return _internal_cache_nodes(index);
}
inline ::HashSlotInfo_CacheNodeInfo* HashSlotInfo::_internal_add_cache_nodes() {
  return cache_nodes_.Add();
}
inline ::HashSlotInfo_CacheNodeInfo* HashSlotInfo::add_cache_nodes() {
  ::HashSlotInfo_CacheNodeInfo* _add = _internal_add_cache_nodes();
  // @@protoc_insertion_point(field_add:HashSlotInfo.cache_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HashSlotInfo_CacheNodeInfo >&
HashSlotInfo::cache_nodes() const {
  // @@protoc_insertion_point(field_list:HashSlotInfo.cache_nodes)
  return cache_nodes_;
}

// .HashSlotInfo.CacheNodeInfo cache_node = 3;
inline bool HashSlotInfo::_internal_has_cache_node() const {
  return this != internal_default_instance() && cache_node_ != nullptr;
}
inline bool HashSlotInfo::has_cache_node() const {
  return _internal_has_cache_node();
}
inline void HashSlotInfo::clear_cache_node() {
  if (GetArenaForAllocation() == nullptr && cache_node_ != nullptr) {
    delete cache_node_;
  }
  cache_node_ = nullptr;
}
inline const ::HashSlotInfo_CacheNodeInfo& HashSlotInfo::_internal_cache_node() const {
  const ::HashSlotInfo_CacheNodeInfo* p = cache_node_;
  return p != nullptr ? *p : reinterpret_cast<const ::HashSlotInfo_CacheNodeInfo&>(
      ::_HashSlotInfo_CacheNodeInfo_default_instance_);
}
inline const ::HashSlotInfo_CacheNodeInfo& HashSlotInfo::cache_node() const {
  // @@protoc_insertion_point(field_get:HashSlotInfo.cache_node)
  return _internal_cache_node();
}
inline void HashSlotInfo::unsafe_arena_set_allocated_cache_node(
    ::HashSlotInfo_CacheNodeInfo* cache_node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cache_node_);
  }
  cache_node_ = cache_node;
  if (cache_node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HashSlotInfo.cache_node)
}
inline ::HashSlotInfo_CacheNodeInfo* HashSlotInfo::release_cache_node() {
  
  ::HashSlotInfo_CacheNodeInfo* temp = cache_node_;
  cache_node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HashSlotInfo_CacheNodeInfo* HashSlotInfo::unsafe_arena_release_cache_node() {
  // @@protoc_insertion_point(field_release:HashSlotInfo.cache_node)
  
  ::HashSlotInfo_CacheNodeInfo* temp = cache_node_;
  cache_node_ = nullptr;
  return temp;
}
inline ::HashSlotInfo_CacheNodeInfo* HashSlotInfo::_internal_mutable_cache_node() {
  
  if (cache_node_ == nullptr) {
    auto* p = CreateMaybeMessage<::HashSlotInfo_CacheNodeInfo>(GetArenaForAllocation());
    cache_node_ = p;
  }
  return cache_node_;
}
inline ::HashSlotInfo_CacheNodeInfo* HashSlotInfo::mutable_cache_node() {
  ::HashSlotInfo_CacheNodeInfo* _msg = _internal_mutable_cache_node();
  // @@protoc_insertion_point(field_mutable:HashSlotInfo.cache_node)
  return _msg;
}
inline void HashSlotInfo::set_allocated_cache_node(::HashSlotInfo_CacheNodeInfo* cache_node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cache_node_;
  }
  if (cache_node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HashSlotInfo_CacheNodeInfo>::GetOwningArena(cache_node);
    if (message_arena != submessage_arena) {
      cache_node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cache_node, submessage_arena);
    }
    
  } else {
    
  }
  cache_node_ = cache_node;
  // @@protoc_insertion_point(field_set_allocated:HashSlotInfo.cache_node)
}

// -------------------------------------------------------------------

// CommandInfo

// .CommandInfo.CmdType cmd_type = 1;
inline void CommandInfo::clear_cmd_type() {
  cmd_type_ = 0;
}
inline ::CommandInfo_CmdType CommandInfo::_internal_cmd_type() const {
  return static_cast< ::CommandInfo_CmdType >(cmd_type_);
}
inline ::CommandInfo_CmdType CommandInfo::cmd_type() const {
  // @@protoc_insertion_point(field_get:CommandInfo.cmd_type)
  return _internal_cmd_type();
}
inline void CommandInfo::_internal_set_cmd_type(::CommandInfo_CmdType value) {
  
  cmd_type_ = value;
}
inline void CommandInfo::set_cmd_type(::CommandInfo_CmdType value) {
  _internal_set_cmd_type(value);
  // @@protoc_insertion_point(field_set:CommandInfo.cmd_type)
}

// string param1 = 2;
inline void CommandInfo::clear_param1() {
  param1_.ClearToEmpty();
}
inline const std::string& CommandInfo::param1() const {
  // @@protoc_insertion_point(field_get:CommandInfo.param1)
  return _internal_param1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandInfo::set_param1(ArgT0&& arg0, ArgT... args) {
 
 param1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommandInfo.param1)
}
inline std::string* CommandInfo::mutable_param1() {
  std::string* _s = _internal_mutable_param1();
  // @@protoc_insertion_point(field_mutable:CommandInfo.param1)
  return _s;
}
inline const std::string& CommandInfo::_internal_param1() const {
  return param1_.Get();
}
inline void CommandInfo::_internal_set_param1(const std::string& value) {
  
  param1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandInfo::_internal_mutable_param1() {
  
  return param1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandInfo::release_param1() {
  // @@protoc_insertion_point(field_release:CommandInfo.param1)
  return param1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandInfo::set_allocated_param1(std::string* param1) {
  if (param1 != nullptr) {
    
  } else {
    
  }
  param1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param1,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (param1_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    param1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommandInfo.param1)
}

// string param2 = 3;
inline void CommandInfo::clear_param2() {
  param2_.ClearToEmpty();
}
inline const std::string& CommandInfo::param2() const {
  // @@protoc_insertion_point(field_get:CommandInfo.param2)
  return _internal_param2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandInfo::set_param2(ArgT0&& arg0, ArgT... args) {
 
 param2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CommandInfo.param2)
}
inline std::string* CommandInfo::mutable_param2() {
  std::string* _s = _internal_mutable_param2();
  // @@protoc_insertion_point(field_mutable:CommandInfo.param2)
  return _s;
}
inline const std::string& CommandInfo::_internal_param2() const {
  return param2_.Get();
}
inline void CommandInfo::_internal_set_param2(const std::string& value) {
  
  param2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandInfo::_internal_mutable_param2() {
  
  return param2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandInfo::release_param2() {
  // @@protoc_insertion_point(field_release:CommandInfo.param2)
  return param2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandInfo::set_allocated_param2(std::string* param2) {
  if (param2 != nullptr) {
    
  } else {
    
  }
  param2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param2,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (param2_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    param2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CommandInfo.param2)
}

// -------------------------------------------------------------------

// KvData

// string key = 1;
inline void KvData::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& KvData::key() const {
  // @@protoc_insertion_point(field_get:KvData.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KvData::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KvData.key)
}
inline std::string* KvData::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:KvData.key)
  return _s;
}
inline const std::string& KvData::_internal_key() const {
  return key_.Get();
}
inline void KvData::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KvData::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KvData::release_key() {
  // @@protoc_insertion_point(field_release:KvData.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KvData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KvData.key)
}

// string value = 2;
inline void KvData::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& KvData::value() const {
  // @@protoc_insertion_point(field_get:KvData.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KvData::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KvData.value)
}
inline std::string* KvData::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:KvData.value)
  return _s;
}
inline const std::string& KvData::_internal_value() const {
  return value_.Get();
}
inline void KvData::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KvData::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KvData::release_value() {
  // @@protoc_insertion_point(field_release:KvData.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KvData::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KvData.value)
}

// -------------------------------------------------------------------

// HeartInfo

// int32 cur_time = 1;
inline void HeartInfo::clear_cur_time() {
  cur_time_ = 0;
}
inline int32_t HeartInfo::_internal_cur_time() const {
  return cur_time_;
}
inline int32_t HeartInfo::cur_time() const {
  // @@protoc_insertion_point(field_get:HeartInfo.cur_time)
  return _internal_cur_time();
}
inline void HeartInfo::_internal_set_cur_time(int32_t value) {
  
  cur_time_ = value;
}
inline void HeartInfo::set_cur_time(int32_t value) {
  _internal_set_cur_time(value);
  // @@protoc_insertion_point(field_set:HeartInfo.cur_time)
}

// .HeartInfo.CacheStatus cache_status = 2;
inline void HeartInfo::clear_cache_status() {
  cache_status_ = 0;
}
inline ::HeartInfo_CacheStatus HeartInfo::_internal_cache_status() const {
  return static_cast< ::HeartInfo_CacheStatus >(cache_status_);
}
inline ::HeartInfo_CacheStatus HeartInfo::cache_status() const {
  // @@protoc_insertion_point(field_get:HeartInfo.cache_status)
  return _internal_cache_status();
}
inline void HeartInfo::_internal_set_cache_status(::HeartInfo_CacheStatus value) {
  
  cache_status_ = value;
}
inline void HeartInfo::set_cache_status(::HeartInfo_CacheStatus value) {
  _internal_set_cache_status(value);
  // @@protoc_insertion_point(field_set:HeartInfo.cache_status)
}

// -------------------------------------------------------------------

// AckInfo

// .AckInfo.AckType ack_type = 1;
inline void AckInfo::clear_ack_type() {
  ack_type_ = 0;
}
inline ::AckInfo_AckType AckInfo::_internal_ack_type() const {
  return static_cast< ::AckInfo_AckType >(ack_type_);
}
inline ::AckInfo_AckType AckInfo::ack_type() const {
  // @@protoc_insertion_point(field_get:AckInfo.ack_type)
  return _internal_ack_type();
}
inline void AckInfo::_internal_set_ack_type(::AckInfo_AckType value) {
  
  ack_type_ = value;
}
inline void AckInfo::set_ack_type(::AckInfo_AckType value) {
  _internal_set_ack_type(value);
  // @@protoc_insertion_point(field_set:AckInfo.ack_type)
}

// .AckInfo.AckStatus ack_status = 2;
inline void AckInfo::clear_ack_status() {
  ack_status_ = 0;
}
inline ::AckInfo_AckStatus AckInfo::_internal_ack_status() const {
  return static_cast< ::AckInfo_AckStatus >(ack_status_);
}
inline ::AckInfo_AckStatus AckInfo::ack_status() const {
  // @@protoc_insertion_point(field_get:AckInfo.ack_status)
  return _internal_ack_status();
}
inline void AckInfo::_internal_set_ack_status(::AckInfo_AckStatus value) {
  
  ack_status_ = value;
}
inline void AckInfo::set_ack_status(::AckInfo_AckStatus value) {
  _internal_set_ack_status(value);
  // @@protoc_insertion_point(field_set:AckInfo.ack_status)
}

// -------------------------------------------------------------------

// CMCData

// .CMCData.DataType data_type = 1;
inline void CMCData::clear_data_type() {
  data_type_ = 0;
}
inline ::CMCData_DataType CMCData::_internal_data_type() const {
  return static_cast< ::CMCData_DataType >(data_type_);
}
inline ::CMCData_DataType CMCData::data_type() const {
  // @@protoc_insertion_point(field_get:CMCData.data_type)
  return _internal_data_type();
}
inline void CMCData::_internal_set_data_type(::CMCData_DataType value) {
  
  data_type_ = value;
}
inline void CMCData::set_data_type(::CMCData_DataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:CMCData.data_type)
}

// .HashSlotInfo hs_info = 2;
inline bool CMCData::_internal_has_hs_info() const {
  return this != internal_default_instance() && hs_info_ != nullptr;
}
inline bool CMCData::has_hs_info() const {
  return _internal_has_hs_info();
}
inline void CMCData::clear_hs_info() {
  if (GetArenaForAllocation() == nullptr && hs_info_ != nullptr) {
    delete hs_info_;
  }
  hs_info_ = nullptr;
}
inline const ::HashSlotInfo& CMCData::_internal_hs_info() const {
  const ::HashSlotInfo* p = hs_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::HashSlotInfo&>(
      ::_HashSlotInfo_default_instance_);
}
inline const ::HashSlotInfo& CMCData::hs_info() const {
  // @@protoc_insertion_point(field_get:CMCData.hs_info)
  return _internal_hs_info();
}
inline void CMCData::unsafe_arena_set_allocated_hs_info(
    ::HashSlotInfo* hs_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hs_info_);
  }
  hs_info_ = hs_info;
  if (hs_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMCData.hs_info)
}
inline ::HashSlotInfo* CMCData::release_hs_info() {
  
  ::HashSlotInfo* temp = hs_info_;
  hs_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HashSlotInfo* CMCData::unsafe_arena_release_hs_info() {
  // @@protoc_insertion_point(field_release:CMCData.hs_info)
  
  ::HashSlotInfo* temp = hs_info_;
  hs_info_ = nullptr;
  return temp;
}
inline ::HashSlotInfo* CMCData::_internal_mutable_hs_info() {
  
  if (hs_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::HashSlotInfo>(GetArenaForAllocation());
    hs_info_ = p;
  }
  return hs_info_;
}
inline ::HashSlotInfo* CMCData::mutable_hs_info() {
  ::HashSlotInfo* _msg = _internal_mutable_hs_info();
  // @@protoc_insertion_point(field_mutable:CMCData.hs_info)
  return _msg;
}
inline void CMCData::set_allocated_hs_info(::HashSlotInfo* hs_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete hs_info_;
  }
  if (hs_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HashSlotInfo>::GetOwningArena(hs_info);
    if (message_arena != submessage_arena) {
      hs_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hs_info, submessage_arena);
    }
    
  } else {
    
  }
  hs_info_ = hs_info;
  // @@protoc_insertion_point(field_set_allocated:CMCData.hs_info)
}

// .CommandInfo cmd_info = 3;
inline bool CMCData::_internal_has_cmd_info() const {
  return this != internal_default_instance() && cmd_info_ != nullptr;
}
inline bool CMCData::has_cmd_info() const {
  return _internal_has_cmd_info();
}
inline void CMCData::clear_cmd_info() {
  if (GetArenaForAllocation() == nullptr && cmd_info_ != nullptr) {
    delete cmd_info_;
  }
  cmd_info_ = nullptr;
}
inline const ::CommandInfo& CMCData::_internal_cmd_info() const {
  const ::CommandInfo* p = cmd_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CommandInfo&>(
      ::_CommandInfo_default_instance_);
}
inline const ::CommandInfo& CMCData::cmd_info() const {
  // @@protoc_insertion_point(field_get:CMCData.cmd_info)
  return _internal_cmd_info();
}
inline void CMCData::unsafe_arena_set_allocated_cmd_info(
    ::CommandInfo* cmd_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd_info_);
  }
  cmd_info_ = cmd_info;
  if (cmd_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMCData.cmd_info)
}
inline ::CommandInfo* CMCData::release_cmd_info() {
  
  ::CommandInfo* temp = cmd_info_;
  cmd_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CommandInfo* CMCData::unsafe_arena_release_cmd_info() {
  // @@protoc_insertion_point(field_release:CMCData.cmd_info)
  
  ::CommandInfo* temp = cmd_info_;
  cmd_info_ = nullptr;
  return temp;
}
inline ::CommandInfo* CMCData::_internal_mutable_cmd_info() {
  
  if (cmd_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CommandInfo>(GetArenaForAllocation());
    cmd_info_ = p;
  }
  return cmd_info_;
}
inline ::CommandInfo* CMCData::mutable_cmd_info() {
  ::CommandInfo* _msg = _internal_mutable_cmd_info();
  // @@protoc_insertion_point(field_mutable:CMCData.cmd_info)
  return _msg;
}
inline void CMCData::set_allocated_cmd_info(::CommandInfo* cmd_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cmd_info_;
  }
  if (cmd_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CommandInfo>::GetOwningArena(cmd_info);
    if (message_arena != submessage_arena) {
      cmd_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmd_info, submessage_arena);
    }
    
  } else {
    
  }
  cmd_info_ = cmd_info;
  // @@protoc_insertion_point(field_set_allocated:CMCData.cmd_info)
}

// .KvData kv_data = 4;
inline bool CMCData::_internal_has_kv_data() const {
  return this != internal_default_instance() && kv_data_ != nullptr;
}
inline bool CMCData::has_kv_data() const {
  return _internal_has_kv_data();
}
inline void CMCData::clear_kv_data() {
  if (GetArenaForAllocation() == nullptr && kv_data_ != nullptr) {
    delete kv_data_;
  }
  kv_data_ = nullptr;
}
inline const ::KvData& CMCData::_internal_kv_data() const {
  const ::KvData* p = kv_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::KvData&>(
      ::_KvData_default_instance_);
}
inline const ::KvData& CMCData::kv_data() const {
  // @@protoc_insertion_point(field_get:CMCData.kv_data)
  return _internal_kv_data();
}
inline void CMCData::unsafe_arena_set_allocated_kv_data(
    ::KvData* kv_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kv_data_);
  }
  kv_data_ = kv_data;
  if (kv_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMCData.kv_data)
}
inline ::KvData* CMCData::release_kv_data() {
  
  ::KvData* temp = kv_data_;
  kv_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KvData* CMCData::unsafe_arena_release_kv_data() {
  // @@protoc_insertion_point(field_release:CMCData.kv_data)
  
  ::KvData* temp = kv_data_;
  kv_data_ = nullptr;
  return temp;
}
inline ::KvData* CMCData::_internal_mutable_kv_data() {
  
  if (kv_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::KvData>(GetArenaForAllocation());
    kv_data_ = p;
  }
  return kv_data_;
}
inline ::KvData* CMCData::mutable_kv_data() {
  ::KvData* _msg = _internal_mutable_kv_data();
  // @@protoc_insertion_point(field_mutable:CMCData.kv_data)
  return _msg;
}
inline void CMCData::set_allocated_kv_data(::KvData* kv_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete kv_data_;
  }
  if (kv_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KvData>::GetOwningArena(kv_data);
    if (message_arena != submessage_arena) {
      kv_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kv_data, submessage_arena);
    }
    
  } else {
    
  }
  kv_data_ = kv_data;
  // @@protoc_insertion_point(field_set_allocated:CMCData.kv_data)
}

// .HeartInfo ht_info = 5;
inline bool CMCData::_internal_has_ht_info() const {
  return this != internal_default_instance() && ht_info_ != nullptr;
}
inline bool CMCData::has_ht_info() const {
  return _internal_has_ht_info();
}
inline void CMCData::clear_ht_info() {
  if (GetArenaForAllocation() == nullptr && ht_info_ != nullptr) {
    delete ht_info_;
  }
  ht_info_ = nullptr;
}
inline const ::HeartInfo& CMCData::_internal_ht_info() const {
  const ::HeartInfo* p = ht_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::HeartInfo&>(
      ::_HeartInfo_default_instance_);
}
inline const ::HeartInfo& CMCData::ht_info() const {
  // @@protoc_insertion_point(field_get:CMCData.ht_info)
  return _internal_ht_info();
}
inline void CMCData::unsafe_arena_set_allocated_ht_info(
    ::HeartInfo* ht_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ht_info_);
  }
  ht_info_ = ht_info;
  if (ht_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMCData.ht_info)
}
inline ::HeartInfo* CMCData::release_ht_info() {
  
  ::HeartInfo* temp = ht_info_;
  ht_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HeartInfo* CMCData::unsafe_arena_release_ht_info() {
  // @@protoc_insertion_point(field_release:CMCData.ht_info)
  
  ::HeartInfo* temp = ht_info_;
  ht_info_ = nullptr;
  return temp;
}
inline ::HeartInfo* CMCData::_internal_mutable_ht_info() {
  
  if (ht_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::HeartInfo>(GetArenaForAllocation());
    ht_info_ = p;
  }
  return ht_info_;
}
inline ::HeartInfo* CMCData::mutable_ht_info() {
  ::HeartInfo* _msg = _internal_mutable_ht_info();
  // @@protoc_insertion_point(field_mutable:CMCData.ht_info)
  return _msg;
}
inline void CMCData::set_allocated_ht_info(::HeartInfo* ht_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ht_info_;
  }
  if (ht_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::HeartInfo>::GetOwningArena(ht_info);
    if (message_arena != submessage_arena) {
      ht_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ht_info, submessage_arena);
    }
    
  } else {
    
  }
  ht_info_ = ht_info;
  // @@protoc_insertion_point(field_set_allocated:CMCData.ht_info)
}

// .AckInfo ack_info = 6;
inline bool CMCData::_internal_has_ack_info() const {
  return this != internal_default_instance() && ack_info_ != nullptr;
}
inline bool CMCData::has_ack_info() const {
  return _internal_has_ack_info();
}
inline void CMCData::clear_ack_info() {
  if (GetArenaForAllocation() == nullptr && ack_info_ != nullptr) {
    delete ack_info_;
  }
  ack_info_ = nullptr;
}
inline const ::AckInfo& CMCData::_internal_ack_info() const {
  const ::AckInfo* p = ack_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::AckInfo&>(
      ::_AckInfo_default_instance_);
}
inline const ::AckInfo& CMCData::ack_info() const {
  // @@protoc_insertion_point(field_get:CMCData.ack_info)
  return _internal_ack_info();
}
inline void CMCData::unsafe_arena_set_allocated_ack_info(
    ::AckInfo* ack_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ack_info_);
  }
  ack_info_ = ack_info;
  if (ack_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMCData.ack_info)
}
inline ::AckInfo* CMCData::release_ack_info() {
  
  ::AckInfo* temp = ack_info_;
  ack_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::AckInfo* CMCData::unsafe_arena_release_ack_info() {
  // @@protoc_insertion_point(field_release:CMCData.ack_info)
  
  ::AckInfo* temp = ack_info_;
  ack_info_ = nullptr;
  return temp;
}
inline ::AckInfo* CMCData::_internal_mutable_ack_info() {
  
  if (ack_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::AckInfo>(GetArenaForAllocation());
    ack_info_ = p;
  }
  return ack_info_;
}
inline ::AckInfo* CMCData::mutable_ack_info() {
  ::AckInfo* _msg = _internal_mutable_ack_info();
  // @@protoc_insertion_point(field_mutable:CMCData.ack_info)
  return _msg;
}
inline void CMCData::set_allocated_ack_info(::AckInfo* ack_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ack_info_;
  }
  if (ack_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AckInfo>::GetOwningArena(ack_info);
    if (message_arena != submessage_arena) {
      ack_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ack_info, submessage_arena);
    }
    
  } else {
    
  }
  ack_info_ = ack_info;
  // @@protoc_insertion_point(field_set_allocated:CMCData.ack_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::HashSlotInfo_HashInfoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HashSlotInfo_HashInfoType>() {
  return ::HashSlotInfo_HashInfoType_descriptor();
}
template <> struct is_proto_enum< ::CommandInfo_CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CommandInfo_CmdType>() {
  return ::CommandInfo_CmdType_descriptor();
}
template <> struct is_proto_enum< ::HeartInfo_CacheStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HeartInfo_CacheStatus>() {
  return ::HeartInfo_CacheStatus_descriptor();
}
template <> struct is_proto_enum< ::AckInfo_AckType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AckInfo_AckType>() {
  return ::AckInfo_AckType_descriptor();
}
template <> struct is_proto_enum< ::AckInfo_AckStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AckInfo_AckStatus>() {
  return ::AckInfo_AckStatus_descriptor();
}
template <> struct is_proto_enum< ::CMCData_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMCData_DataType>() {
  return ::CMCData_DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cmcdata_2eproto
