syntax = "proto3";

// package cmcdata; // 包名称，产生的类会被包装在C++的命名空间中

message HashSlotInfo {
  enum HashInfoType {
    NULLHASHINFO = 0;
    ALLCACHEINFO = 1;
    ADDCACHE = 2;
    REMCACHE = 3;
  }
  message CacheNodeInfo {
    string name = 1;
    string ip = 2;
    int32 port = 3;
    bytes slots = 4;
  }
  HashInfoType hashinfo_type = 1;
  repeated CacheNodeInfo cache_nodes = 2;
  CacheNodeInfo cache_node = 3;
}

message CommandInfo {
  // int32 cmd_type = 1;   // GET/SET/DEL/GETSLOT...可以用数字代表命令类型
  enum CmdType {
    NULLCMD = 0;
    GET = 1;
    SET = 2;
    DEL = 3;
    GETSLOT = 4; // client/cache向master拉取hashslot信息
    OFFLINE = 5; // cache_server通知master下线通知
    // ......
  }
  CmdType cmd_type = 1;
  string param1 = 2;     // para1为命令参数1，如GET "key"
  string param2 = 3;     // 命令参数2, 如SET时可以用到：SET "key" "value"
}

// k-v数据信息，主要用于cache响应客户端的查询，假如查询失败，返回key="", value=""
message KvData {
  string key = 1;
  string value =2;
}

message HeartInfo {
  int32 cur_time = 1;
  // int32 status = 2;
  enum CacheStatus {
    NULLSTATUS = 0;
    OK = 1;
    FAIL = 2;
  }
  CacheStatus cache_status = 2;
}

message AckInfo {
  enum AckType {
    NULLACK = 0;
    SETACK = 1;
    DELACK = 2;
    CACHEUPDATEACK = 3;
  }
  enum AckStatus {
    NULLSTATUS = 0;
    OK = 1;
    FAIL = 2;
  }
  AckType ack_type = 1;
  AckStatus ack_status = 2;
}

message CMCData {
// 声明数据包类型，如：哈希槽信息，命令信息，k-v数据信息，心跳信息...然后选择性的封装or解封
  enum DataType {
    NULLTYPE = 0;
    COMMANDINFO = 1;
    KVDATA = 2;
    HASHSLOTINFO = 3;
    HEARTINFO = 4;
    ACKINFO = 5;
  }
  DataType data_type = 1;
  HashSlotInfo hs_info = 2;
  CommandInfo cmd_info = 3;
  KvData kv_data = 4;
  HeartInfo ht_info = 5;
  AckInfo ack_info = 6;
}